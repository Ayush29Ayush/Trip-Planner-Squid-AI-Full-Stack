1. Go to squid.cloud and create an account.
2. Go to onboarding section and select "I want to build with an empty starter app".
3. Enter the required details and click on "Create".
4. You will get a command, copy and paste it in the terminal.
5. After the installation is successful, now you will have a backend and a frontend directory.
6. Use "npm start" to start the app.

#! Backend
* Allows us to create an api and interact with data securely.
* Interact with some of the AI integrations for our applications.
* Backend will be using "SQUID BACKEND SDK"

#! Frontend
* It will be the client which will interact with the squid backend.
* Access data sources/AI.
* Will do all of the things that a client side should do.
* Frontend will be using "SQUID CLIENT SDK" which is wrapped either by React/Angular SDK.

These SDK provided by squid contains lots of functionality which will make it possible for us to integrate our application with the data sources + AI features.
--------------------------------------------------------------

#! SQUID BACKEND SETUP and defining our database schema
1. Go to console.squid.cloud and open Integrations section.
2. Click on built_in_db option under Current Integrations. Then click on the triple dots and select "Schema".
3. Now add a new collection named "trips" but before that we have to figure out the fields that we want to have for our trips in the type of information that we want to store.
4. For now, lets add "startDate", "endDate", "country" and "notes".
5. Always give description to each field so that the AI that will interact with our data knows what this field means.
a) startDate: Date : required : description: "The start date of the trip"
b) endDate: Date : required : description: "The end date of the trip"
c) country: String : required : description: "The country of the trip"
d) notes: Array: required : description: "Notes related to the trip"
e) id : String: primary key : required : description: "The unique id of the trip"
6. Now click on save schema.
7. Now there's a button "Query with AI" where we can ask questions about it and it will actually give us some response. This is the "SquidAI Chat".

#! Setting up the Frontend
1. Clean up App.tsx, App.css and index.css
2. In src directory, create a components folder and add AddTripForm.tsx along with its css file.
** AddTripForm.tsx
'''
import { useState, useEffect } from 'react';
import { useCollection } from '@squidcloud/react';
import './AddTripForm.css';
import { Trip } from '../types';

function AddTrip() {
  const [country, setCountry] = useState('');
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [countries, setCountries] = useState([]);
  const tripsCollection = useCollection<Trip>("trips") //! The name in the database is trips, but each trip looks like this as specified in "<Trip>". useCollection is a hook provided by squid

  useEffect(() => {
    fetch('https://restcountries.com/v3.1/all')
      .then((response) => {
        if (response.ok) return response.json();
      })
      .then((data) => {
        //! This is a function used inside map
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const countryNamess = data.map((country: any) => country.name.common);
        setCountries(countryNamess);
      })
      .catch((error) => console.error(error));
  }, []);

  const addTrip = () => {
    const tripId = crypto.randomUUID()
    //! This is the way provided by squid to insert data
    tripsCollection.doc(tripId).insert({
        id: tripId,
        country,
        startDate: new Date(startDate),
        endDate: new Date(endDate),
        notes: []
    })
  }

  return (
    <div className="trip-container">
      <h3>Add Trip</h3>
      <div className="trip-form">
        <select value={country} onChange={(e) => setCountry(e.target.value)}>
          <option value="" disabled>Select Country</option>
          {countries.map((country) => (
            <option key={country} value={country}>
              {country}
            </option>
          ))}
        </select>
        <input type="date" value={startDate} onChange={(e) => setStartDate(e.target.value)} />
        <input type="date" value={endDate} onChange={(e) => setEndDate(e.target.value)} />
        <button onClick={addTrip}>Add Trip</button>
      </div>
    </div>
  );
}

export default AddTrip;
'''
4. Now add this component to App.tsx
5. Add a data entry from the UI and check whether it got added or not from Inspect element or from squid website under the integrations section.

#! Viewing Trips Components
* Create 2 components
a) One for rendering an indicidual trip => Trip.tsx
b) One for rendering the list of trips => TripList.tsx


#! Trip.tsx 
1. There are a bunch of functionality that we need like 
* View all of the different notes
* Add a new note
* Delete a note
* Delete the trip itself
** Trip.tsx
'''
import { format } from 'date-fns';
import { Trip } from '../types';
import { useState } from 'react';

//! Here, we are defining the type of the props as we are working on a typescript file so defining types of any variable is a must.
type Props = {
  trip: Trip; // Defines the trip schema desclared in our squid db as a Trip type
  onDelete: (id: string) => void; // Defines the onDelete function which will take id as functional parameter and return type is void
  onAddNote: (tripId: string, note: string) => void; // Defines the onAddNote function which will take tripId and note as functional parameter and return type is void
  onDeleteNote: (tripId: string, noteIndex: number) => void; // Defines the onDeleteNote function which will take tripId and noteIndex as functional parameter and return type is void
  index: number; // Defines the index as number
};

function TripCard({ trip, onDelete, onAddNote, onDeleteNote, index }: Props) {
  const [newNote, setNewNote] = useState('');

  const handleAddNote = (tripId: string, note: string) => {
    if (note.trim() !== '') {
      onAddNote(tripId, note.trim());
      setNewNote('');
    }
  };

  return (
    <div className="trip-card" key={index}>
      <h4>
        <span>{format(trip.startDate, 'PPP')} - {format(trip.endDate, 'PPP')}</span>
        <button className="country-button">{trip.country}</button>
        <button className="delete-button" onClick={() => onDelete(trip.id)}>Delete</button>
      </h4>
      <ul>
        {trip.notes.map((note, noteIndex) => (
          <li key={noteIndex} className="note">
            {note}{' '}
            <button className="delete-button" onClick={() => onDeleteNote(trip.id, noteIndex)}>x</button>
          </li>
        ))}
      </ul>
      <div className="note-form">
        <input type="text" className="note-input" value={newNote} onChange={(e) => setNewNote(e.target.value)} placeholder="Add a note" />
        <button className="add-note-button" onClick={() => handleAddNote(trip.id, newNote)}>Add Note</button>
      </div>
    </div>
  );
}

export default TripCard
'''

#! TripList.tsx
'''
import React from 'react';
import { Trip } from '../types';
import TripCard from './Trip';
import './Trip.css';

type Props = {
  trips: Trip[]; // Defines the trip schema desclared in our squid db as a array of Trip type
  onDelete: (id: string) => void;
  onAddNote: (tripId: string, note: string) => void;
  onDeleteNote: (tripId: string, noteIndex: number) => void;
};

function TripList({ trips, onDelete, onAddNote, onDeleteNote }: Props) {
  return (
    <div className="trip-list-container">
      {trips &&
        trips.map((trip, index) => (
          <TripCard
            key={index}
            trip={trip}
            index={index}
            onDelete={onDelete}
            onAddNote={onAddNote}
            onDeleteNote={onDeleteNote}
          />
        ))}
    </div>
  );
}

export default TripList;
'''

#! App.tsx
'''
import './App.css';
import AddTrip from './components/AddTripForm';
import TripList from './components/TripList';
import { Trip } from './types';
import { useCollection, useQuery } from '@squidcloud/react';

function App() {
  const collection = useCollection<Trip>('trips'); // This is the name in the database. It will grab the trips collection from the db
  const trips = useQuery(collection.query()); // This is a hook provided by squid to get data i.e all of the trips from the db

  console.log(trips)
  console.log(trips.data)

  //! Helper function that will help us find a trip that needs to be modified
  const findTrip = (id: string) => {
    return trips.data.find((trip) => trip.data.id === id)
  }

  //! Function that will be called when we need to delete a trip
  const onDelete = (id: string) => {
    const trip = findTrip(id);
    if (trip) trip.delete() //! This will delete the trip from the db, .delete() is a function provided by squid
  };

  const onAddNote = (tripId: string, note: string) => {
    const trip = findTrip(tripId);
    if (!trip) return
    const notes = trip.data.notes
    notes.push(note)
    trip.update({
      notes: notes
    })
  };


  const onDeleteNote = (tripId: string, noteIndex: number) => {
    const trip = findTrip(tripId);
    if (!trip) return
    const notes = trip.data.notes;
    //! This will remove the note at the specified index, .update() is a function provided by squid
    trip.update({
      notes: notes.filter((_, index) => index !== noteIndex)
    })
  };

  return (
    <div className="card">
      {/* <h1>Hello World</h1> */}
      <AddTrip />
      <TripList
        trips={trips.data.map((trip) => trip.data)}
        onDelete={onDelete}
        onAddNote={onAddNote}
        onDeleteNote={onDeleteNote}
      />
    </div>
  );
}

export default App;
'''

#! Adding AI Integration
* We need to build in this AI integration that allows us to interact with our database.
* We can use a decorator to mark a function that we define inside of this class as executable so that we can use it from the frontend and execute some kind of operation i.e interacting with an AI.

* Rename example-service.ts from backend/src to aiQuery.ts
** aiQuery.ts
'''
import {
  SquidService,
  secureDatabase,
  webhook,
  executable,
} from '@squidcloud/backend';

export class ExampleService extends SquidService {
  @secureDatabase('all', 'built_in_db')
  allowAccessToBuiltInDb(): boolean {
    return true;
  }
  // @webhook('resetCounter')
  // async resetCounter() {
  //   await this.squid.collection('count').doc('count').delete();
  // }

  @executable()
  async askQuestion(question: string): Promise<string> {
    const aiResponse = await this.squid
      .ai()
      .executeAiQuery('built_in_db', question);

    console.log(`
      Question: ${question}
      Query: ${aiResponse.executedQuery ?? 'No Query executed'}
      Explanation: ${aiResponse.explanation ?? 'No Explanation'}
      `);

    return aiResponse.answer;
  }
}
'''

#! AskAI.tsx
'''
import { useState } from 'react';
import { useSquid } from '@squidcloud/react';
import './AskAI.css';
import LoadingIndicator from './LoadingIndicator';

function AskAI() {
  const [text, setText] = useState('');
  const [result, setResult] = useState('');
  const [loading, setLoading] = useState(false);
  const squid = useSquid();

  //! Here we will implement the 'askPressed' function which is going to integrate with the AI that we wrote in the backend
  const askPressed = async () => {
    if (!text) return;
    
    setLoading(true);
    const result = await squid.executeFunction('askQuestion', text);
    setResult(result);
    setText('');
    setLoading(false);
  };

  const closeResult = () => {
    setResult('');
  };

  return (
    <div className="container">
      <h3>Ask a Question!</h3>
      <input type="text" value={text} onChange={(e) => setText(e.target.value)} />
      {loading ? (
        <LoadingIndicator />
      ) : (
        <button onClick={askPressed}>Ask</button>
      )}
      {result && (
        <div className="result-container">
          <textarea value={result} rows={4} />
          <button onClick={closeResult} className="close-button"></button>
        </div>
      )}
    </div>
  );
}

export default AskAI;
'''

#! Deployment
* Since our backend is running in our local environment, we need to deploy it.
* Approach - 1 => Go to your Squid Cloud account and click on "Overview", then go to "Deploy your backend".
* Approach - 2 => cd backend && npm run deploy
'''
PS D:\Trip Planner Squid AI Project\trip-planner\backend> npm run deploy

> backend@0.0.1 deploy
> squid deploy

Building code bundle...

> backend@0.0.1 build
> squid build

Building...
asset index.js 600 KiB [emitted] [minimized] (name: main) 2 related assets
asset bundle.zip 516 KiB [emitted]
asset public/README.md 946 bytes [emitted] [from: src/public/README.md] [copied]
asset index.d.ts 210 bytes [emitted]
asset service/aiQuery.d.ts 204 bytes [emitted]
asset service/index.d.ts 27 bytes [emitted]
chunk (runtime: main) index.js (main) 830 KiB (javascript) 670 bytes (runtime) [entry] [rendered]
runtime modules 670 bytes 3 modules
+ 262 modules
2024-08-08 11:33:28: webpack compiled
Build succeeded.
Deploying code bundle for appId '0h0xvr0wi19qsu7fub' to the 'dev' environment...
Code deployed
PS D:\Trip Planner Squid AI Project\trip-planner\backend>
'''

* Now go to main.tsx and comment out squidDeveloperId
'''
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App.tsx';
import { SquidContextProvider } from '@squidcloud/react';
import './index.css';

ReactDOM.createRoot(document.getElementById('root')!).render(
  <SquidContextProvider
    options={{
      appId: import.meta.env.VITE_SQUID_APP_ID,
      region: import.meta.env.VITE_SQUID_REGION,
      environmentId: import.meta.env.VITE_SQUID_ENVIRONMENT_ID,
      // squidDeveloperId: import.meta.env.VITE_SQUID_DEVELOPER_ID, //! Commenting this out tells the squid app to use the deployed backend instead of the local one
    }}
  >
    <App />
  </SquidContextProvider>,
);
'''

* Now cd frontend and use "npm run dev"

* You can also go to squid cloud and to the "Backend" section and check various details on executables, triggers, OpenAI api, etc.